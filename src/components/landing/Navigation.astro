---
import Logo from "@/assets/icons/logo.svg";
import ArrowIcon from "@/assets/icons/arrow-icon.svg";

const menuOptions = [
	{ label: "How it works", href: "#" },
	{ label: "Pricing", href: "/pricing" },
	{ label: "Why us", href: "#" },
	{ label: "Testimonials", href: "#" },
	{ label: "Samples", href: "#" },
	{ label: "Case studies", href: "#" },
];
---

<nav class="site-container text-neutral-10 relative flex w-full items-center justify-between py-6">
	<a href="/public" class="flex items-center">
		<Logo class="h-7" />
	</a>

	<!-- Desktop Nav -->
	<div class="hidden grow items-center justify-center gap-x-7 lg:flex">
		{
			menuOptions.map((item) => (
				<a
					href={item.href}
					class="nav-link flex items-center gap-x-2 transition-colors hover:text-blue-500 hover:underline"
					data-href={item.href}
					data-active="false"
				>
					<div class="active-circle h-2 w-2 rounded-full opacity-0 transition-opacity" />
					{item.label}
				</a>
			))
		}
	</div>

	<!-- Desktop Auth -->
	<div class="hidden items-center gap-4 font-medium lg:flex">
		<a href="https://kapa99.com/login">Login</a>
		<a href="https://kapa99.com/register" class="button-secondary flex items-center gap-x-2">
			<span>Start free trial</span>
			<ArrowIcon />
		</a>
	</div>

	<!-- Mobile Toggle -->
	<button id="menu-toggle" class="relative z-50 lg:hidden" aria-label="Toggle menu">
		<svg class="h-6 w-6 text-black" fill="none" stroke="currentColor" viewBox="0 0 24 24">
			<path
				id="menu-icon"
				stroke-linecap="round"
				stroke-linejoin="round"
				stroke-width="2"
				d="M4 6h16M4 12h16M4 18h16"></path>
		</svg>
	</button>

	<!-- Off-Canvas Menu -->
	<div
		id="mobile-menu"
		class="fixed top-0 left-0 z-50 flex h-full w-3/4 max-w-sm -translate-x-full transform flex-col gap-4 bg-white p-6 shadow-md transition-transform duration-300 ease-in-out lg:hidden"
	>
		<div class="mb-6 flex items-center justify-between">
			<Logo class="h-6" />
			<button id="menu-close" aria-label="Close menu">
				<svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M6 18L18 6M6 6l12 12"></path>
				</svg>
			</button>
		</div>

		{
			menuOptions.map((item) => (
				<a
					href={item.href}
					class="mobile-nav-link border-neutral-95 flex items-center gap-x-3 border-b py-4 text-lg transition-colors hover:bg-gray-50 hover:text-blue-500"
					data-href={item.href}
					data-active="false"
				>
					<div class="mobile-active-circle h-2 w-2 flex-shrink-0 rounded-full opacity-0 transition-opacity" />
					{item.label}
				</a>
			))
		}
		<a href="https://kapa99.com/login" class="border-neutral-95 border-b py-4 text-lg">Login</a>
		<a
			href="https://kapa99.com/register"
			class="button-secondary mt-4 flex w-full items-center justify-center gap-x-2"
		>
			<span>Start free trial</span>
			<ArrowIcon />
		</a>
	</div>

	<!-- Overlay -->
	<div id="menu-overlay" class="bg-opacity-30 fixed inset-0 z-30 hidden bg-black lg:hidden"></div>

	<!-- Toggle Script -->
	<script>
		const toggle = document.getElementById("menu-toggle");
		const close = document.getElementById("menu-close");
		const menu = document.getElementById("mobile-menu");
		const overlay = document.getElementById("menu-overlay");

		const openMenu = () => {
			menu?.classList.remove("-translate-x-full");
			overlay?.classList.remove("hidden");
		};

		const closeMenu = () => {
			menu?.classList.add("-translate-x-full");
			overlay?.classList.add("hidden");
		};

		toggle?.addEventListener("click", openMenu);
		close?.addEventListener("click", closeMenu);
		overlay?.addEventListener("click", closeMenu);

		// Function to update active states based on current path
		function updateActiveStates() {
			const currentPath = window.location.pathname;
			const navLinks = document.querySelectorAll(".nav-link");
			const mobileNavLinks = document.querySelectorAll(".mobile-nav-link");

			// Update desktop nav links
			navLinks.forEach((link) => {
				const href = link.getAttribute("data-href");
				const circle = link.querySelector(".active-circle")!;

				// Determine if this link should be active
				let isActive = false;

				if (href === "#") {
					// Hash links are active when on home page or /public
					isActive = currentPath === "/" || currentPath === "/public";
				} else {
					// Exact path matches
					isActive = currentPath === href;
				}

				// Update the data-active attribute
				link.setAttribute("data-active", isActive.toString());

				// Update styles based on data-active attribute
				if (isActive) {
					link.classList.add("font-medium");
					link.classList.remove("hover:text-blue-500");
					circle.classList.add("bg-pumpkin", "opacity-100");
					circle.classList.remove("opacity-0");
				} else {
					link.classList.remove("font-medium");
					link.classList.add("hover:text-blue-500");
					circle.classList.remove("bg-pumpkin", "opacity-100");
					circle.classList.add("opacity-0");
				}
			});

			// Update mobile nav links
			mobileNavLinks.forEach((link) => {
				const href = link.getAttribute("data-href");
				const circle = link.querySelector(".mobile-active-circle")!;

				// Determine if this link should be active
				let isActive = false;

				if (href === "#") {
					// Hash links are active when on home page or /public
					isActive = currentPath === "/" || currentPath === "/public";
				} else {
					// Exact path matches
					isActive = currentPath === href;
				}

				// Update the data-active attribute
				link.setAttribute("data-active", isActive.toString());

				// Update styles based on data-active attribute
				if (isActive) {
					link.classList.add("bg-orange-50", "font-medium");
					link.classList.remove("hover:bg-gray-50", "hover:text-blue-500");
					circle.classList.add("bg-pumpkin", "opacity-100");
					circle.classList.remove("opacity-0");
				} else {
					link.classList.remove("bg-orange-50", "font-medium");
					link.classList.add("hover:bg-gray-50", "hover:text-blue-500");
					circle.classList.remove("bg-pumpkin", "opacity-100");
					circle.classList.add("opacity-0");
				}
			});
		}

		// Update active states on page load
		document.addEventListener("DOMContentLoaded", updateActiveStates);

		// Update active states when the URL changes (for client-side routing)
		window.addEventListener("popstate", updateActiveStates);

		// Optional: Update active states when clicking nav links (for immediate feedback)
		document.addEventListener("click", (event) => {
			const link = event?.target?.closest(".nav-link, .mobile-nav-link");
			if (link) {
				// Small delay to allow navigation to complete
				setTimeout(updateActiveStates, 10);
			}
		});
	</script>
</nav>
