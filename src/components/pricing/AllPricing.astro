---
import Divider from "@/components/ui/Divider.astro";
import Title from "@/components/ui/Title.astro";

import TimeIcon from "@/assets/icons/pricing/time.svg?url";
import TwentyFourHoursIcon from "@/assets/icons/pricing/24-hours.svg?url";
import DedicatedTeamIcon from "@/assets/icons/pricing/dedicated-team.svg?url";
import ArrowIcon from "@/assets/icons/arrow-icon.svg";

import clsx from "clsx";

const prices = {
	month: [
		{
			icon: TimeIcon,
			title: "Async standard",
			pricing: 349,
			description:
				"Ideal for steady-paced needs. Get your tasks delivered within two days using async communication.",
			isDedicated: false,
		},
		{
			icon: TwentyFourHoursIcon,
			title: "Async priority",
			pricing: 849,
			description:
				"Need things faster? Priority delivery in just one day — all with the ease of async updates.",
			isDedicated: false,
		},
		{
			icon: DedicatedTeamIcon,
			title: "Dedicated team",
			pricing: 1299,
			description:
				"Your on-demand team, fully synced with you. Real-time collaboration and same-day delivery.",
			isDedicated: true,
		},
	],
	yearly: [
		{
			icon: TimeIcon,
			title: "Async standard",
			pricing: 670,
			description:
				"Ideal for steady-paced needs. Get your tasks delivered within two days using async communication.",
			isDedicated: false,
		},
		{
			icon: TwentyFourHoursIcon,
			title: "Async priority",
			pricing: 1200,
			description:
				"Need things faster? Priority delivery in just one day — all with the ease of async updates.",
			isDedicated: false,
		},
		{
			icon: DedicatedTeamIcon,
			title: "Dedicated team",
			pricing: 2499,
			description:
				"Your on-demand team, fully synced with you. Real-time collaboration and same-day delivery.",
			isDedicated: true,
		},
	],
};

const selectedFrequency = "month";
---

<div class="site-container">
	<Title type="h1" class="text-center lg:hidden">Design On Demand, One Flat Rate</Title>

	<Divider size="small" class="lg:hidden" />

	<div class="mx-auto flex flex-col items-center justify-center">
		<!-- Switch -->
		<div
			class="bg-sky-blue relative flex w-[200px] items-center justify-center rounded-4xl border border-[#CDF] px-3 py-2"
		>
			<!-- Hidden input for state management -->
			<input type="checkbox" id="pricing-toggle" class="sr-only" data-frequency="month" />

			<!-- Sliding background -->
			<div
				id="switch-background"
				class="absolute rounded-2xl bg-neutral-100 px-4 py-1 transition-all duration-300 ease-in-out"
				style="
					box-shadow: 0px 1px 2px 0px rgba(24, 29, 41, 0.18);
					left: 12px;
					width: 88px;
					height: 32px;
				"
			>
			</div>

			<!-- Monthly option -->
			<label
				for="pricing-toggle"
				class="pricing-option text-neutral-10 relative z-10 cursor-pointer rounded-2xl px-4 py-1 font-medium transition-colors duration-300 select-none"
				data-frequency="month"
			>
				Monthly
			</label>

			<!-- Annual option -->
			<label
				for="pricing-toggle"
				class="pricing-option text-neutral-10 relative z-10 cursor-pointer rounded-2xl px-4 py-1 font-medium transition-colors duration-300 select-none"
				data-frequency="yearly"
			>
				Annual
			</label>
		</div>

		<Divider size="small" />

		<div
			id="pricing-grid"
			class="grid grid-cols-1 gap-x-6 gap-y-6 transition-opacity duration-300 md:grid-cols-2 lg:grid-cols-3 lg:gap-y-0"
		>
			{
				prices[selectedFrequency].map((price, index) => (
					<div
						class={clsx(
							"pricing-card border-light-blue flex flex-col gap-y-8 rounded-2xl border p-8 transition-all duration-300",
							price.isDedicated ? "text-neutral-95 bg-night-blue" : "text-neutral-10 bg-sky-blue",
						)}
						data-card-index={index}
					>
						<div class="mb-6">
							<img src={price.icon} alt={price.title} class="mb-4 w-10" />
							<Title
								type="h6"
								mobileType="h4"
								class={clsx(price.isDedicated ? "text-neutral-95" : "text-neutral-10")}
							>
								{price.title}
							</Title>
							<p
								class={clsx(
									"text-k-md mt-2 min-h-[72px]",
									price.isDedicated ? "text-neutral-95" : "text-neutral-10",
								)}
							>
								{price.description}
							</p>
						</div>

						<div class="flex items-end gap-x-2">
							<Title
								type="h4"
								useDesktopOnMobile
								class={clsx(
									"pricing-amount transition-all duration-300",
									price.isDedicated ? "text-neutral-95" : "text-neutral-10",
								)}
							>
								${price.pricing}
							</Title>
							<span class="pricing-frequency relative -top-1 transition-all duration-300">
								per {selectedFrequency}
							</span>
						</div>

						<button
							class={clsx(
								"flex items-center justify-center gap-x-2",
								price.isDedicated ? "button-primary" : "button-secondary",
							)}
						>
							Start free trial
							<ArrowIcon class="h-3 w-3 text-neutral-100" />
						</button>
					</div>
				))
			}
		</div>
	</div>
</div>

<style>
	.sr-only {
		position: absolute;
		width: 1px;
		height: 1px;
		padding: 0;
		margin: -1px;
		overflow: hidden;
		clip: rect(0, 0, 0, 0);
		white-space: nowrap;
		border: 0;
	}

	.pricing-option:hover {
		opacity: 0.8;
	}

	.pricing-card {
		transform: scale(1);
	}
</style>

<script define:vars={{ prices }}>
	let currentFrequency = "month";
	let isAnimating = false;

	function updatePricingDisplay(frequency) {
		if (isAnimating || frequency === currentFrequency) return;

		isAnimating = true;
		const pricingGrid = document.getElementById("pricing-grid");

		pricingGrid.style.opacity = "0.3";

		setTimeout(() => {
			const selectedPrices = prices[frequency];

			selectedPrices.forEach((price, index) => {
				const card = document.querySelector(`[data-card-index="${index}"]`);
				if (card) {
					const amountEl = card.querySelector(".pricing-amount");
					if (amountEl) {
						amountEl.textContent = `$${price.pricing}`;
					}

					const frequencyEl = card.querySelector(".pricing-frequency");
					if (frequencyEl) {
						frequencyEl.textContent = `per ${frequency === "yearly" ? "year" : "month"}`;
					}
				}
			});

			currentFrequency = frequency;

			pricingGrid.style.opacity = "1";
			isAnimating = false;
		}, 150);
	}

	function updateSwitchPosition(frequency) {
		const switchBackground = document.getElementById("switch-background");
		const toggle = document.getElementById("pricing-toggle");

		if (frequency === "yearly") {
			switchBackground.style.left = "100px";
			toggle.checked = true;
			toggle.setAttribute("data-frequency", "yearly");
		} else {
			switchBackground.style.left = "12px";
			toggle.checked = false;
			toggle.setAttribute("data-frequency", "month");
		}
	}

	function handleFrequencyChange(frequency) {
		updateSwitchPosition(frequency);
		updatePricingDisplay(frequency);
	}

	// Initialize event listeners
	document.addEventListener("DOMContentLoaded", () => {
		const pricingOptions = document.querySelectorAll(".pricing-option");

		pricingOptions.forEach((option) => {
			option.addEventListener("click", (e) => {
				e.preventDefault();
				const frequency = option.getAttribute("data-frequency");
				handleFrequencyChange(frequency);
			});
		});
	});
</script>
